households_in_poverty <- get_acs(geography = "county",
variables = c("B17017_002"),
state = states,
year = 2015) %>%
rename(households_in_poverty = estimate) %>%
select(1,2,4)
# load required packages
library(tidycensus)
library(rgdal)
library(readr)
library(dplyr)
library(tidyr)
library(tigris)
library(utils)
black_population <- get_acs(geography = "county",
variables = c("B02009_001"),
state = states,
year = 2015) %>%
rename(black_population = estimate) %>%
select(1,2,4)
black_population <- get_acs(geography = "county",
variables = c("B02009_001"),
state = states,
year = 2015) %>%
rename(black_population = estimate) %>%
select(1,2,4)
# create list of US states, by two-letter abbrevations, plus DC and PR
states <- c(state.abb, "DC", "PR")
population <- get_acs(geography = "county",
variables = "B01003_001",
state = states,
year = 2015) %>%
rename(population = estimate)  %>%
select(1,2,4)
population <- get_acs(geography = "state",
variables = "B01003_001",
state = states,
year = 2015) %>%
rename(population = estimate)  %>%
select(1,2,4)
population <- get_acs(geography = "state",
variables = "B01003_001",
year = 2015) %>%
rename(population = estimate)  %>%
select(1,2,4)
View(population)
setwd("~/Dropbox/berkeley/2017dataviz/Reis Thebault/reis-thebault")
# load required packages
library(tidycensus)
library(rgdal)
library(readr)
library(dplyr)
library(tigris)
# set census api key. Obtain from http://api.census.gov/data/key_signup.html
census_api_key("f6811bb29b8f3f4de930ececf654c6d0ebe6c7be", install = TRUE)
readRenviron("~/.Renviron")
# get list of variables in the 2015 American Community Survey, 5-year estimates (i.e. 2011-2015)
acs15 <- load_variables(2015, "acs5", cache = TRUE)
#############
# get ACS 2015 5-year data, by counties
# population
population <- get_acs(geography = "state",
variables = "B01003_001",
year = 2015) %>%
rename(population = estimate)  %>%
select(1,2,4)
# number of households
households <- get_acs(geography = "state",
variables = c("B17017_001"),
year = 2015) %>%
rename(households = estimate) %>%
select(1,2,4)
# white population (white alone, not latino)
white_population <- get_acs(geography = "state",
variables = c("B01001_001"),
year = 2015) %>%
rename(white_population = estimate) %>%
select(1,2,4)
# join data frames into one, calculate percentages where necessary
states <- inner_join(population,households) %>%
inner_join(white_population) %>%
mutate(pc_white_population = round(black_population/population*100,2),
pc_minority_population = 100 - pc_white_population)
# Some cleaning: remove NaNs from data, replace with zero
is.nan.data.frame <- function(x)
do.call(cbind, lapply(x, is.nan))
counties[is.nan(counties)] <- 0
# save as CSV
write_csv(states,"states.csv", na="")
# works with TIGRIS package to obtain Census Bureau shapefiles
options(tigris_use_cache = TRUE)
# load Census Bureau TIGER/LINE states shapefile
states_map <- states()
# join shapefile to Census data (fix row names first)
states_map@data <- inner_join(states_map@data, states, by="GEOID")
# save shapefile
writeOGR(states_map,"states_map",layer="states_map", driver = "ESRI Shapefile")
states <- inner_join(population,households) %>%
inner_join(white_population) %>%
mutate(pc_white_population = round(black_population/population*100,2),
pc_minority_population = 100 - pc_white_population)
states <- inner_join(population,households) %>%
inner_join(white_population) %>%
mutate(pc_white_population = round(white_population/population*100,2),
pc_minority_population = 100 - pc_white_population)
View(states)
# get list of variables in the 2015 American Community Survey, 5-year estimates (i.e. 2011-2015)
acs15 <- load_variables(2015, "acs5", cache = TRUE)
View(acs15)
population <- get_acs(geography = "state",
variables = "B01003_001",
year = 2015) %>%
rename(population = estimate)  %>%
select(1,2,4)
# number of households
households <- get_acs(geography = "state",
variables = c("B17017_001"),
year = 2015) %>%
rename(households = estimate) %>%
select(1,2,4)
# white population (white alone, not latino)
white_population <- get_acs(geography = "state",
variables = c("B01001H_001"),
year = 2015) %>%
rename(white_population = estimate) %>%
select(1,2,4)
# join data frames into one, calculate percentages where necessary
states <- inner_join(population,households) %>%
inner_join(white_population) %>%
mutate(pc_white_population = round(white_population/population*100,2),
pc_minority_population = 100 - pc_white_population)
# Some cleaning: remove NaNs from data, replace with zero
is.nan.data.frame <- function(x)
do.call(cbind, lapply(x, is.nan))
counties[is.nan(counties)] <- 0
# save as CSV
write_csv(states,"states.csv", na="")
# works with TIGRIS package to obtain Census Bureau shapefiles
options(tigris_use_cache = TRUE)
# load Census Bureau TIGER/LINE states shapefile
states_map <- states()
# join shapefile to Census data (fix row names first)
states_map@data <- inner_join(states_map@data, states, by="GEOID")
# save shapefile
writeOGR(states_map,"states_map",layer="states_map", driver = "ESRI Shapefile")
setwd("~/Dropbox/berkeley/2017dataviz/Reis Thebault/reis-thebault")
census_api_key("f6811bb29b8f3f4de930ececf654c6d0ebe6c7be", install = TRUE)
readRenviron("~/.Renviron")
# get list of variables in the 2015 American Community Survey, 5-year estimates (i.e. 2011-2015)
acs15 <- load_variables(2015, "acs5", cache = TRUE)
#############
# get ACS 2015 5-year data, by counties
# population
population <- get_acs(geography = "state",
variables = "B01003_001",
year = 2015) %>%
rename(population = estimate)  %>%
select(1,2,4)
households <- get_acs(geography = "state",
variables = c("B17017_001"),
year = 2015) %>%
rename(households = estimate) %>%
select(1,2,4)
white_population <- get_acs(geography = "state",
variables = c("B01001H_001"),
year = 2015) %>%
rename(white_population = estimate) %>%
select(1,2,4)
states <- inner_join(population,households) %>%
inner_join(white_population) %>%
mutate(pc_white_population = round(white_population/population*100,2),
pc_minority_population = 100 - pc_white_population)
View(states)
is.nan.data.frame <- function(x)
do.call(cbind, lapply(x, is.nan))
states[is.nan(states)] <- 0
# save as CSV
write_csv(states,"states.csv", na="")
# load Census Bureau TIGER/LINE states shapefile
states_map <- states()
# join shapefile to Census data (fix row names first)
states_map@data <- inner_join(states_map@data, states, by="GEOID")
# save shapefile
writeOGR(states_map,"states_map",layer="states_map", driver = "ESRI Shapefile")
# save as CSV
write_csv(states,"states.csv", na="")
setwd("~/Dropbox/berkeley/2017dataviz/Reis Thebault/reis-thebault")
# save as CSV
write_csv(states,"states.csv", na="")
="
# save shapefile
writeOGR(states_map,"states_map",layer="states_map", driver = "ESRI Shapefile")
# load Census Bureau TIGER/LINE states shapefile
states_map <- states()
# join shapefile to Census data (fix row names first)
states_map@data <- inner_join(states_map@data, states, by="GEOID")
plot(states_map)
# save shapefile
writeOGR(states_map,"states_map",layer="states_map", driver = "ESRI Shapefile")
View(states_map@data)
# load Census Bureau TIGER/LINE states shapefile
states_map <- states()
# load Census Bureau TIGER/LINE states shapefile using tigris
states_map <- states()
# join shapefile to Census data (fix row names first)
states_map@data <- inner_join(states_map@data, states)
# save shapefile
writeOGR(states_map,"states_map",layer="states_map", driver = "ESRI Shapefile")
View(states_map@data)
plot(states_map)
states_map <- states()
# join shapefile to Census data (fix row names first)
states_map@data <- left_join(states_map@data, states)
# save shapefile
writeOGR(states_map,"states_map", layer="states_map", driver = "ESRI Shapefile")
load("/Users/peteraldhous/Dropbox/berkeley/2017dataviz/Reis Thebault/reis-thebault/refineries.RData")
ggplot(la_chart) +
geom_segment(color="#6a51a3", aes(xend=facility_name, x=reorder(facility_name, total_releases_mil), y=state_pc_poverty_pop, yend=pct_poverty), arrow = arrow(length = unit(0.2,"cm"), type="closed")) +
geom_point( aes(x=facility_name, y=state_pc_poverty_pop), color="#6a51a3", size=1.5 ) +
geom_point( aes(size=total_releases_mil, x=facility_name, y=0), alpha = 0.5) +
scale_size_area(max_size = 10) +
scale_y_continuous(limits=c(-10,70), breaks = c(20,40,60)) +
theme_light() +
theme(
legend.position = "none",
panel.border = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank()) +
xlab("") +
ylab("") +
geom_hline(yintercept=0, size=0.1) +
coord_flip()
library(readr)
library(dplyr)
library(ggplot2)
library(scales)
library(leaflet)
library(rgdal)
library(quantmod)
library(highcharter)
library(RColorBrewer)
library(forcats)
library(htmlwidgets)
library(ggiraph)
library(tidyverse)
ggplot(tx_chart, aes(x="", y = reorder(facility_name, +total_releases_mil)))+
geom_point(aes(size = total_releases_mil, color = "#6a51a3"), alpha = 0.7) +
scale_size_area(guide = FALSE, max_size = 15) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
ggplot(la_chart) +
geom_segment(color="#6a51a3", aes(xend=facility_name, x=reorder(facility_name, total_releases_mil), y=state_pc_poverty_pop, yend=pct_poverty), arrow = arrow(length = unit(0.2,"cm"), type="closed")) +
geom_point( aes(x=facility_name, y=state_pc_poverty_pop), color="#6a51a3", size=1.5 ) +
geom_point( aes(size=total_releases_mil, x=facility_name, y=0), alpha = 0.5) +
scale_size_area(max_size = 10) +
scale_y_continuous(limits=c(-10,70), breaks = c(20,40,60)) +
theme_light() +
theme(
legend.position = "none",
panel.border = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank()) +
xlab("") +
ylab("") +
geom_hline(yintercept=0, size=0.1) +
coord_flip()
ggplot(ca_chart) +
geom_segment( aes(x=facility_name, xend=facility_name, y=state_pc_poverty_pop, yend=pct_poverty), color="grey") +
geom_point( aes(x=facility_name, y=state_pc_poverty_pop), color="#aaaaaa", size=3 ) +
geom_point( aes(x=facility_name, y=pct_poverty), color="#6a51a3", size=3 ) +
coord_flip()+
theme_light() +
theme(
legend.position = "none",
panel.border = element_blank(),) +
xlab("") +
ylab("")
ggplot(la_chart) +
geom_segment(color="#6a51a3", aes(xend=facility_name, x=reorder(facility_name, total_releases_mil), y=state_pc_poverty_pop, yend=pct_poverty), arrow = arrow(length = unit(0.2,"cm"), type="closed")) +
geom_point( aes(x=facility_name, y=state_pc_poverty_pop), color="#6a51a3", size=1.5 ) +
geom_point( aes(size=total_releases_mil, x=facility_name, y=0), alpha = 0.5) +
scale_size_area(max_size = 10) +
scale_y_continuous(limits=c(-10,70), breaks = c(20,40,60)) +
theme_light() +
theme(
legend.position = "none",
panel.border = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank()) +
xlab("") +
ylab("") +
geom_hline(yintercept=0, size=0.1) +
coord_flip()
# correlation between releases and minority compare
ggplot(subset(refineries_compare, radius==5), aes(x=minority_compare, y=total_releases_mil)) +
geom_point(aes(size=minority_pop), color = "red", alpha = 0.5) +
ggtitle("Population within 5 miles of refinery") +
scale_x_continuous(breaks = c(0,0.5,1,2,3,4), labels = c("Zero","Half","","Twice","3 times","4 times")) +
scale_y_continuous(labels = comma) +
scale_size_area(max_size = 10, guide = FALSE) +
xlab("% minority population, compared to % for entire state") +
ylab("Toxic releases (million lbs)") +
geom_vline(xintercept = 1, linetype = "dotted") +
theme_minimal()
ggplot(subset(refineries_compare, radius==3), aes(x=minority_compare, y=total_releases_mil)) +
geom_point(aes(size=minority_pop), color = "#006d2c", alpha = 0.5) +
ggtitle("Population within 3 miles of refinery") +
scale_x_continuous(breaks = c(0,0.5,1,2,3,4), labels = c("Zero","Half","","Twice","3 times","4 times")) +
scale_y_continuous(labels = comma) +
scale_size_area(max_size = 10, guide = FALSE) +
xlab("% minority population, compared to % for entire state") +
ylab("Toxic releases (million lbs)") +
geom_vline(xintercept = 1, linetype = "dotted") +
theme_minimal()
ggplot(subset(refineries_compare, radius==1), aes(x=minority_compare, y=total_releases_mil)) +
geom_point(aes(size=minority_pop), color = "red", alpha = 0.5) +
ggtitle("Population within 1 mile of refinery") +
scale_x_continuous(breaks = c(0,0.5,1,2,3,4), labels = c("Zero","Half","","Twice","3 times","4 times")) +
scale_y_continuous(labels = comma) +
scale_size_area(max_size = 10, guide = FALSE) +
xlab("% minority population, compared to % for entire state") +
ylab("Toxic releases (million lbs)") +
geom_vline(xintercept = 1, linetype = "dotted") +
theme_minimal()
ggplot(subset(refineries_compare, radius==3), aes(x=poverty_compare, y=total_releases_mil)) +
geom_point(aes(size=persons_below_poverty_level), color = "#54278f", alpha = 0.5) +
ggtitle("Population within 3 miles of refinery") +
scale_x_continuous(breaks = c(0,0.5,1,2,3,4,5), labels = c("Zero","Half","","Twice","3 times","4 times","5 times")) +
scale_y_continuous(labels = comma) +
scale_size_area(max_size = 10, guide = FALSE) +
xlab("% population in poverty, compared to % for entire state") +
ylab("Toxic releases (million lbs)") +
geom_vline(xintercept = 1, linetype = "dotted") +
theme_minimal()
ggplot(subset(refineries_compare, radius==1), aes(x=poverty_compare, y=total_releases_mil)) +
geom_point(aes(size=persons_below_poverty_level), color = "red", alpha = 0.5) +
ggtitle("Population within 1 miles of refinery") +
scale_x_continuous(breaks = c(0,0.5,1,2,3,4,5), labels = c("Zero","Half","","Twice","3 times","4 times","5 times")) +
scale_y_continuous(labels = comma) +
scale_size_area(max_size = 10, guide = FALSE) +
xlab("% population in poverty, compared to % for entire state") +
ylab("Toxic releases (million lbs)") +
geom_vline(xintercept = 1, linetype = "dotted") +
theme_minimal()
